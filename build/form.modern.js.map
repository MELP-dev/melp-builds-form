{"version":3,"file":"form.modern.js","sources":["../../lib/src/utils/Control/Control.ts","../../lib/src/types/Form.ts","../../lib/src/controls/Group/Group.tsx","../../lib/src/controls/Multiline/Multiline.tsx","../../lib/src/components/NumberInput/NumberInput.tsx","../../lib/src/controls/Number/Number.tsx","../../lib/src/controls/Text/Text.tsx","../../lib/src/controls/Switch/Switch.tsx","../../lib/src/controls/Controls.ts","../../lib/src/components/MpFormControl/MpFormControl.tsx","../../lib/src/components/MpForm/MpForm.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { FieldError, RegisterOptions } from \"react-hook-form\";\nimport { DefaultMessages, MpControl } from \"../../types/Form\";\n\nexport function controlRegisterOptions(control: MpControl): RegisterOptions {\n  let pattern: RegExp | undefined;\n  if (control.validations?.pattern != null) {\n    try {\n      pattern = new RegExp(control.validations?.pattern);\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(\n        \"Provided pattern is not a valid RegExp\",\n        control.validations.pattern\n      );\n    }\n  }\n  const { min, max, minLength, maxLength } = control.validations ?? {};\n  return {\n    required: control.required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern: pattern,\n  };\n}\n\nexport const defaultMessages: DefaultMessages = {\n  required: (control: MpControl) =>\n    `${control.label ?? control.key} is required`,\n  min: (control: MpControl) => `${control.label ?? control.key} is too small`,\n  max: (control: MpControl) => `${control.label ?? control.key} is too large`,\n  minLength: (control: MpControl) =>\n    `${control.label ?? control.key} is too short`,\n  maxLength: (control: MpControl) =>\n    `${control.label ?? control.key} is too long`,\n  pattern: (control: MpControl) =>\n    `${control.label ?? control.key} is not valid`,\n};\n\nexport function useErrorMessages(\n  control: MpControl,\n  defaultMessages: DefaultMessages,\n  error?: FieldError\n): string[] {\n  return useMemo(() => {\n    const errorKeys = [\n      error?.type,\n      ...Object.keys(error?.types ?? {}).filter(\n        (type) => error?.types?.[type] != null\n      ),\n    ].filter((key) => key != null);\n    return errorKeys.map((key) =>\n      !!error?.message\n        ? error.message\n        : control?.messages?.[key ?? \"\"] ??\n          defaultMessages[key || \"pattern\"](control)\n    );\n  }, [control, error, defaultMessages]);\n}\n\nexport function booleanDecimalPointToNumber(\n  decimalPoint?: boolean | number\n): number | undefined {\n  switch (decimalPoint) {\n    case true:\n      return undefined;\n    case false:\n      return 0;\n    default:\n      return decimalPoint;\n  }\n}\n","import { ComponentType } from \"react\";\nimport {\n  Control,\n  FieldError,\n  FieldErrors,\n  RegisterOptions,\n  UseFormMethods,\n} from \"react-hook-form\";\n\nexport enum MpControlType {\n  number = \"number\",\n  text = \"text\",\n  multiline = \"multiline\",\n  group = \"group\",\n  switch = \"switch\",\n}\n\nexport type GridSpan =\n  | undefined\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | \"auto\";\n\nexport interface MpControlValidations {\n  min?: number;\n  max?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string;\n}\n\nexport type ValidationKeys =\n  | \"required\"\n  | \"min\"\n  | \"max\"\n  | \"minLength\"\n  | \"maxLength\"\n  | \"pattern\";\n\nexport type DefaultMessages = Record<\n  ValidationKeys,\n  (control: MpControl) => string\n>;\n\nexport interface MpControl {\n  // Write field value to this key\n  key?: string;\n  // Type\n  type: MpControlType;\n  // Label of the field\n  label?: string;\n  // Placeholder\n  placeholder?: string;\n  // End Adornment\n  endAdornment?: string;\n  // Start Adornment\n  startAdornment?: string;\n  // Required\n  required?: boolean;\n  // Validations\n  validations?: MpControlValidations;\n  // Messages\n  messages?: Partial<Record<ValidationKeys, string>>;\n  // Grid columns span\n  span?: {\n    xs?: GridSpan;\n    sm?: GridSpan;\n    md?: GridSpan;\n    lg?: GridSpan;\n    xl?: GridSpan;\n  };\n  // Group children\n  children?: MpControl[];\n  // Format (i.e date, number, etc.)\n  format?: string;\n  // Negative values\n  negative?: boolean;\n  // Decimal point\n  decimalPoint?: number | boolean;\n  // Locale override\n  locale?: string;\n}\n\nexport interface MpControlProps {\n  control: MpControl;\n  size?: \"small\" | \"medium\";\n  layout?: \"combined\" | \"separated\";\n  variant?: \"outlined\" | \"standard\" | \"filled\";\n  register(options?: RegisterOptions): any;\n  error?: FieldError;\n  hookFormControl: Control;\n  errors?: FieldErrors;\n  locale?: string;\n  defaultMessages: DefaultMessages;\n  overridables?: Partial<MpFormOverridablesMap>;\n}\n\nexport interface MpFormType {\n  // Array of MpControls\n  controls: MpControl[];\n  // Condensed or regular controls\n  size?: \"small\" | \"medium\";\n  // Layout type\n  layout?: \"combined\" | \"separated\";\n  // Control variant\n  variant?: \"outlined\" | \"standard\" | \"filled\";\n  // For values formatters\n  locale?: string;\n}\n\nexport interface MpFormSubmitArguments {\n  // Form values\n  values?: any;\n}\n\nexport interface MpFormProps extends MpFormType, MpFormInputProps {}\n\nexport interface MpFormInputProps {\n  useFormMethods: UseFormMethods;\n  classes?: MpFormClasses;\n  translations?: MpFormTranslations;\n  overridables?: Partial<MpFormOverridablesMap>;\n  defaultMessages?: Partial<DefaultMessages>;\n}\n\nexport interface MpFormClasses {}\n\nexport interface MpFormTranslations {}\n\nexport interface MpFormOverridablesMap {\n  controls: Record<string, ComponentType<MpControlProps>>;\n}\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\nimport MpFormControl from \"../../components/MpFormControl/MpFormControl\";\nimport { MpControl, MpControlProps } from \"../../types/Form\";\nimport { get } from \"react-hook-form\";\n\nconst defaultSpan = { xs: 12 };\n\nexport default function Group({\n  control,\n  size,\n  layout,\n  variant,\n  register,\n  locale,\n  errors,\n  hookFormControl,\n  defaultMessages,\n  overridables,\n}: MpControlProps) {\n  return (\n    <Grid container={true} spacing={2}>\n      {control.children?.map((control: MpControl, i: number) => (\n        <Grid\n          item={true}\n          key={i}\n          xs={12}\n          {...((control.span ?? defaultSpan) as any)}\n        >\n          <MpFormControl\n            register={register}\n            control={control}\n            defaultMessages={defaultMessages}\n            error={get(errors ?? {}, control?.key ?? \"\")}\n            size={size}\n            locale={locale}\n            hookFormControl={hookFormControl}\n            noLabel={true}\n            layout={layout}\n            variant={variant}\n            overridables={overridables}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import { TextField } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { MpControlProps } from \"../../types/Form\";\nimport {\n  controlRegisterOptions,\n  useErrorMessages,\n} from \"../../utils/Control/Control\";\n\nconst inputLabelProps = { shrink: true };\n\nexport default function Multiline({\n  control,\n  size,\n  layout,\n  variant,\n  register,\n  error,\n  defaultMessages,\n}: MpControlProps) {\n  const inputProps = useMemo(\n    () => ({\n      ref: register(controlRegisterOptions(control)),\n    }),\n    [register, control]\n  );\n  const [firstMessage] = useErrorMessages(control, defaultMessages, error);\n\n  return (\n    <TextField\n      error={!!error}\n      multiline={true}\n      rows={4}\n      maxRows={8}\n      helperText={firstMessage}\n      name={control.key}\n      required={control.required}\n      placeholder={control.placeholder}\n      label={layout === \"separated\" ? \"\" : control.label}\n      size={size}\n      fullWidth={true}\n      InputLabelProps={inputLabelProps}\n      inputProps={inputProps}\n      variant={variant}\n    />\n  );\n}\n","import { InputBaseComponentProps } from \"@mui/material\";\nimport React, { forwardRef, useCallback } from \"react\";\n\nexport const NumberInput = forwardRef<HTMLInputElement>(\n  (\n    {\n      onChange,\n      inputRef,\n      decimalPoint = 2,\n      negative = true,\n      ...props\n    }: InputBaseComponentProps & {\n      decimalPoint?: number;\n      negative?: boolean;\n    },\n    ref\n  ) => {\n    const handleChange = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        let val = event.target.value;\n        // Allow only leading -\n        if (negative) {\n          val = val.replace(/-/g, (m, i) => (i > 0 ? \"\" : m));\n        } else {\n          val = val.replace(/-/g, \"\");\n        }\n        // Remove additional . or ,\n        if (decimalPoint > 0) {\n          val = val.replace(/[.,]/g, (m, i: number, s: string) =>\n            s.indexOf(s.match(/[.,]/g)?.[0] ?? \".\") !== i || i === 0 ? \"\" : m\n          );\n        } else {\n          val = val.replace(/[.,]/g, \"\");\n        }\n        // Leave only numbers and . , -\n        val = val.replace(/[^\\d.,-]/g, \"\");\n        if (decimalPoint > 0) {\n          val = val.replace(/[.,]\\d+/g, (m) => m.substr(0, decimalPoint + 1));\n        }\n        // Write to event\n        event.target.value = val;\n        if (typeof onChange === \"function\") {\n          onChange(event);\n        }\n      },\n      [onChange, decimalPoint, negative]\n    );\n    const { onBlur } = props;\n    const handleBlur = useCallback(\n      (event: React.FocusEvent<HTMLInputElement>) => {\n        if (event.target.value != null && event.target.value !== \"\") {\n          event.target.value = (+event.target.value).toFixed(decimalPoint);\n        }\n        if (typeof onBlur === \"function\") {\n          onBlur(event);\n        }\n      },\n      [decimalPoint, onBlur]\n    );\n    return (\n      <input\n        ref={ref ?? inputRef}\n        {...props}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        inputMode=\"decimal\"\n      />\n    );\n  }\n);\n","import { TextField } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { Controller } from \"react-hook-form\";\nimport { NumberInput } from \"../../components/NumberInput/NumberInput\";\nimport { MpControlProps } from \"../../types/Form\";\nimport {\n  booleanDecimalPointToNumber,\n  controlRegisterOptions,\n  useErrorMessages,\n} from \"../../utils/Control/Control\";\n\nconst inputLabelProps = { shrink: true };\n\nexport function NumberView({\n  control,\n  size,\n  layout,\n  variant,\n  error,\n  defaultMessages,\n  value,\n  onChange,\n}: MpControlProps & {\n  value: any;\n  onChange: (...event: any[]) => void;\n}) {\n  const [firstMessage] = useErrorMessages(control, defaultMessages, error);\n  const inputProps = useMemo(\n    () => ({\n      decimalPoint: booleanDecimalPointToNumber(control.decimalPoint),\n      negative: control.negative,\n    }),\n    [control]\n  );\n  const { endAdornment, startAdornment } = control;\n  const InputProps = useMemo(\n    () => ({ inputComponent: NumberInput, endAdornment, startAdornment }),\n    [endAdornment, startAdornment]\n  );\n  return (\n    <TextField\n      error={!!error}\n      helperText={firstMessage}\n      name={control.key}\n      required={control.required}\n      placeholder={control.placeholder}\n      label={layout === \"separated\" ? \"\" : control.label}\n      size={size}\n      fullWidth={true}\n      InputLabelProps={inputLabelProps}\n      value={value ?? \"\"}\n      onChange={onChange}\n      inputProps={inputProps}\n      InputProps={InputProps}\n      variant={variant}\n    />\n  );\n}\n\nexport default function Number(props: MpControlProps) {\n  const { control, hookFormControl } = props;\n  const rules = useMemo(() => controlRegisterOptions(control), [control]);\n  return (\n    <Controller\n      name={control.key ?? \"\"}\n      rules={rules}\n      defaultValue={null}\n      control={hookFormControl}\n      render={({ onChange, value }) => (\n        <NumberView {...props} onChange={onChange} value={value} />\n      )}\n    />\n  );\n}\n","import { InputBaseComponentProps, TextField } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { MpControlProps } from \"../../types/Form\";\nimport {\n  controlRegisterOptions,\n  useErrorMessages,\n} from \"../../utils/Control/Control\";\nimport InputMask from \"react-input-mask\";\n\nconst inputLabelProps = { shrink: true };\n\nexport default function Text({\n  control,\n  size,\n  layout,\n  variant,\n  register,\n  error,\n  defaultMessages,\n}: MpControlProps) {\n  const { endAdornment, startAdornment, format } = control;\n  const inputProps = useMemo(() => {\n    const props: InputBaseComponentProps & {\n      mask?: string;\n      maskChar?: string;\n    } = {\n      ref: register(controlRegisterOptions(control)),\n    };\n    if (format != null) {\n      props.mask = format;\n      props.maskChar = \"\";\n    }\n    return props;\n  }, [register, control, format]);\n  const [firstMessage] = useErrorMessages(control, defaultMessages, error);\n  const InputProps = useMemo(\n    () => ({\n      endAdornment,\n      startAdornment,\n      inputComponent: format ? InputMask : undefined,\n    }),\n    [endAdornment, startAdornment, format]\n  );\n  return (\n    <TextField\n      error={!!error}\n      helperText={firstMessage}\n      name={control.key}\n      required={control.required}\n      placeholder={control.placeholder}\n      label={layout === \"separated\" ? \"\" : control.label}\n      size={size}\n      fullWidth={true}\n      InputLabelProps={inputLabelProps}\n      inputProps={inputProps}\n      InputProps={InputProps}\n      variant={variant}\n    />\n  );\n}\n","import React from \"react\";\nimport { FormControlLabel } from \"@mui/material\";\nimport MuiSwitch from \"@mui/material/Switch\";\nimport { MpControlProps } from \"../../types/Form\";\n\nexport default function Switch({ control, register, layout }: MpControlProps) {\n  return (\n    <FormControlLabel\n      control={\n        <MuiSwitch name={control.key} color=\"primary\" inputRef={register} />\n      }\n      label={layout === \"separated\" ? \"\" : control.label}\n    />\n  );\n}\n","import { ComponentType, useMemo } from \"react\";\nimport {\n  MpControl,\n  MpControlProps,\n  MpControlType,\n  MpFormOverridablesMap,\n} from \"../types/Form\";\nimport Group from \"./Group/Group\";\nimport Multiline from \"./Multiline/Multiline\";\nimport Number from \"./Number/Number\";\nimport Text from \"./Text/Text\";\nimport Switch from \"./Switch/Switch\";\n\nexport const controlMap: Record<\n  MpControlType,\n  ComponentType<MpControlProps>\n> = {\n  [MpControlType.text]: Text,\n  [MpControlType.number]: Number,\n  [MpControlType.multiline]: Multiline,\n  [MpControlType.group]: Group,\n  [MpControlType.switch]: Switch,\n};\n\nexport function useControlType(\n  control: MpControl,\n  overridables?: Partial<MpFormOverridablesMap>\n) {\n  return useMemo(\n    () =>\n      overridables?.controls?.[control.type ?? \"\"] ??\n      controlMap[control.type ?? \"\"] ??\n      controlMap.text,\n    [control, overridables?.controls]\n  );\n}\n","import { Box, Grid, InputLabel } from \"@mui/material\";\nimport React from \"react\";\nimport {\n  Control,\n  FieldError,\n  FieldErrors,\n  RegisterOptions,\n} from \"react-hook-form\";\nimport {\n  DefaultMessages,\n  MpControl,\n  MpFormOverridablesMap,\n} from \"../../types/Form\";\nimport { useControlType } from \"../../controls/Controls\";\n\ninterface Props {\n  control: MpControl;\n  size?: \"small\" | \"medium\";\n  layout?: \"combined\" | \"separated\";\n  noLabel?: boolean;\n  variant?: \"outlined\" | \"standard\" | \"filled\";\n  register(options?: RegisterOptions): any;\n  error?: FieldError;\n  errors?: FieldErrors;\n  locale?: string;\n  hookFormControl: Control;\n  overridables?: Partial<MpFormOverridablesMap>;\n  defaultMessages: DefaultMessages;\n}\n\nexport default function MpFormControl({\n  register,\n  control,\n  size,\n  layout,\n  noLabel,\n  variant,\n  locale,\n  error,\n  errors,\n  hookFormControl,\n  defaultMessages,\n  overridables,\n}: Props) {\n  const Component = useControlType(control, overridables);\n\n  const renderedComponent = (\n    <Component\n      control={control}\n      defaultMessages={defaultMessages}\n      register={register}\n      locale={locale}\n      size={size}\n      overridables={overridables}\n      hookFormControl={hookFormControl}\n      layout={layout}\n      variant={variant}\n      errors={errors}\n      error={error}\n    />\n  );\n\n  return layout === \"separated\" && !noLabel ? (\n    <Grid container={true} spacing={2}>\n      <Grid item={true} xs={12} sm={4}>\n        <Box paddingTop={size === \"small\" ? 1 : 2}>\n          <InputLabel error={!!error} required={control.required}>\n            {control.label}\n          </InputLabel>\n        </Box>\n      </Grid>\n      <Grid item={true} xs={12} sm={8}>\n        {renderedComponent}\n      </Grid>\n    </Grid>\n  ) : (\n    renderedComponent\n  );\n}\n","import { Grid } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { MpControl, MpFormProps } from \"../../types/Form\";\nimport { defaultMessages } from \"../../utils/Control/Control\";\nimport MpFormControl from \"../MpFormControl/MpFormControl\";\nimport { get } from \"react-hook-form\";\n\nconst defaultSpan = { xs: 12 };\n\nexport default function MpForm({\n  controls,\n  size,\n  layout,\n  variant,\n  locale,\n  useFormMethods,\n  overridables,\n  defaultMessages: partialDefaultMessages,\n}: MpFormProps) {\n  const { register, errors, control: hookFormControl } = useFormMethods;\n  const messages = useMemo(\n    () => ({\n      ...defaultMessages,\n      ...(partialDefaultMessages ?? {}),\n    }),\n    [partialDefaultMessages]\n  );\n\n  return (\n    <Grid container={true} spacing={2}>\n      {controls.map((control: MpControl, i: number) => (\n        <Grid\n          item={true}\n          key={i}\n          xs={12}\n          {...((control.span ?? defaultSpan) as any)}\n        >\n          <MpFormControl\n            register={register}\n            control={control}\n            locale={locale}\n            hookFormControl={hookFormControl}\n            defaultMessages={messages}\n            error={get(errors ?? {}, control?.key ?? \"\")}\n            errors={errors}\n            size={size}\n            layout={layout}\n            variant={variant}\n            overridables={overridables}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n"],"names":["controlRegisterOptions","control","pattern","_control$validations","validations","_control$validations2","RegExp","e","console","warn","min","max","minLength","maxLength","_control$validations3","required","defaultMessages","_control$label","label","key","_control$label2","_control$label3","_control$label4","_control$label5","_control$label6","error","type","Object","keys","_error$types","types","filter","_error$types2","map","_control$messages","_control$messages2","message","messages","booleanDecimalPointToNumber","decimalPoint","MpControlType","defaultSpan","xs","size","layout","variant","register","locale","errors","hookFormControl","overridables","_control$children","Grid","container","spacing","children","i","assign","item","span","_control$span","React","createElement","MpFormControl","get","_control$key","noLabel","inputLabelProps","shrink","Multiline","inputProps","useMemo","ref","firstMessage","useErrorMessages","TextField","multiline","rows","maxRows","helperText","name","placeholder","fullWidth","InputLabelProps","_excluded","forwardRef","onChange","inputRef","negative","props","_objectWithoutPropertiesLoose","_ref","handleChange","useCallback","event","val","target","value","replace","m","s","indexOf","_s$match$","_s$match","match","substr","onBlur","handleBlur","toFixed","inputMode","endAdornment","startAdornment","InputProps","inputComponent","NumberInput","Number","rules","Controller","defaultValue","render","NumberView","format","mask","maskChar","InputMask","undefined","Switch","FormControlLabel","MuiSwitch","color","controlMap","text","Text","number","group","Group","switch","Component","useControlType","_overridables$control","_overridables$control2","_control$type","_control$type2","controls","renderedComponent","sm","Box","paddingTop","InputLabel","MpForm","useFormMethods","partialDefaultMessages"],"mappings":"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"}