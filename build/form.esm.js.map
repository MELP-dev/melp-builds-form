{"version":3,"file":"form.esm.js","sources":["../../lib/src/utils/Control/Control.ts","../../lib/src/types/Form.ts","../../lib/src/controls/Group/Group.tsx","../../lib/src/controls/Multiline/Multiline.tsx","../../lib/src/components/NumberInput/NumberInput.tsx","../../lib/src/controls/Number/Number.tsx","../../lib/src/controls/Text/Text.tsx","../../lib/src/controls/Switch/Switch.tsx","../../lib/src/controls/Controls.ts","../../lib/src/components/MpFormControl/MpFormControl.tsx","../../lib/src/components/MpForm/MpForm.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { FieldError, RegisterOptions } from \"react-hook-form\";\nimport { DefaultMessages, MpControl } from \"../../types/Form\";\n\nexport function controlRegisterOptions(control: MpControl): RegisterOptions {\n  let pattern: RegExp | undefined;\n  if (control.validations?.pattern != null) {\n    try {\n      pattern = new RegExp(control.validations?.pattern);\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(\n        \"Provided pattern is not a valid RegExp\",\n        control.validations.pattern\n      );\n    }\n  }\n  const { min, max, minLength, maxLength } = control.validations ?? {};\n  return {\n    required: control.required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern: pattern,\n  };\n}\n\nexport const defaultMessages: DefaultMessages = {\n  required: (control: MpControl) =>\n    `${control.label ?? control.key} is required`,\n  min: (control: MpControl) => `${control.label ?? control.key} is too small`,\n  max: (control: MpControl) => `${control.label ?? control.key} is too large`,\n  minLength: (control: MpControl) =>\n    `${control.label ?? control.key} is too short`,\n  maxLength: (control: MpControl) =>\n    `${control.label ?? control.key} is too long`,\n  pattern: (control: MpControl) =>\n    `${control.label ?? control.key} is not valid`,\n};\n\nexport function useErrorMessages(\n  control: MpControl,\n  defaultMessages: DefaultMessages,\n  error?: FieldError\n): string[] {\n  return useMemo(() => {\n    const errorKeys = [\n      error?.type,\n      ...Object.keys(error?.types ?? {}).filter(\n        (type) => error?.types?.[type] != null\n      ),\n    ].filter((key) => key != null);\n    return errorKeys.map((key) =>\n      !!error?.message\n        ? error.message\n        : control?.messages?.[key ?? \"\"] ??\n          defaultMessages[key || \"pattern\"](control)\n    );\n  }, [control, error, defaultMessages]);\n}\n\nexport function booleanDecimalPointToNumber(\n  decimalPoint?: boolean | number\n): number | undefined {\n  switch (decimalPoint) {\n    case true:\n      return undefined;\n    case false:\n      return 0;\n    default:\n      return decimalPoint;\n  }\n}\n","import { ComponentType } from \"react\";\nimport {\n  Control,\n  FieldError,\n  FieldErrors,\n  RegisterOptions,\n  UseFormMethods,\n} from \"react-hook-form\";\n\nexport enum MpControlType {\n  number = \"number\",\n  text = \"text\",\n  multiline = \"multiline\",\n  group = \"group\",\n  switch = \"switch\",\n}\n\nexport type GridSpan =\n  | undefined\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | \"auto\";\n\nexport interface MpControlValidations {\n  min?: number;\n  max?: number;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: string;\n}\n\nexport type ValidationKeys =\n  | \"required\"\n  | \"min\"\n  | \"max\"\n  | \"minLength\"\n  | \"maxLength\"\n  | \"pattern\";\n\nexport type DefaultMessages = Record<\n  ValidationKeys,\n  (control: MpControl) => string\n>;\n\nexport interface MpControl {\n  // Write field value to this key\n  key?: string;\n  // Type\n  type: MpControlType;\n  // Label of the field\n  label?: string;\n  // Placeholder\n  placeholder?: string;\n  // End Adornment\n  endAdornment?: string;\n  // Start Adornment\n  startAdornment?: string;\n  // Required\n  required?: boolean;\n  // Validations\n  validations?: MpControlValidations;\n  // Messages\n  messages?: Partial<Record<ValidationKeys, string>>;\n  // Grid columns span\n  span?: {\n    xs?: GridSpan;\n    sm?: GridSpan;\n    md?: GridSpan;\n    lg?: GridSpan;\n    xl?: GridSpan;\n  };\n  // Group children\n  children?: MpControl[];\n  // Format (i.e date, number, etc.)\n  format?: string;\n  // Negative values\n  negative?: boolean;\n  // Decimal point\n  decimalPoint?: number | boolean;\n  // Locale override\n  locale?: string;\n}\n\nexport interface MpControlProps {\n  control: MpControl;\n  size?: \"small\" | \"medium\";\n  layout?: \"combined\" | \"separated\";\n  variant?: \"outlined\" | \"standard\" | \"filled\";\n  register(options?: RegisterOptions): any;\n  error?: FieldError;\n  hookFormControl: Control;\n  errors?: FieldErrors;\n  locale?: string;\n  defaultMessages: DefaultMessages;\n  overridables?: Partial<MpFormOverridablesMap>;\n}\n\nexport interface MpFormType {\n  // Array of MpControls\n  controls: MpControl[];\n  // Condensed or regular controls\n  size?: \"small\" | \"medium\";\n  // Layout type\n  layout?: \"combined\" | \"separated\";\n  // Control variant\n  variant?: \"outlined\" | \"standard\" | \"filled\";\n  // For values formatters\n  locale?: string;\n}\n\nexport interface MpFormSubmitArguments {\n  // Form values\n  values?: any;\n}\n\nexport interface MpFormProps extends MpFormType, MpFormInputProps {}\n\nexport interface MpFormInputProps {\n  useFormMethods: UseFormMethods;\n  classes?: MpFormClasses;\n  translations?: MpFormTranslations;\n  overridables?: Partial<MpFormOverridablesMap>;\n  defaultMessages?: Partial<DefaultMessages>;\n}\n\nexport interface MpFormClasses {}\n\nexport interface MpFormTranslations {}\n\nexport interface MpFormOverridablesMap {\n  controls: Record<string, ComponentType<MpControlProps>>;\n}\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\nimport MpFormControl from \"../../components/MpFormControl/MpFormControl\";\nimport { MpControl, MpControlProps } from \"../../types/Form\";\nimport { get } from \"react-hook-form\";\n\nconst defaultSpan = { xs: 12 };\n\nexport default function Group({\n  control,\n  size,\n  layout,\n  variant,\n  register,\n  locale,\n  errors,\n  hookFormControl,\n  defaultMessages,\n  overridables,\n}: MpControlProps) {\n  return (\n    <Grid container={true} spacing={2}>\n      {control.children?.map((control: MpControl, i: number) => (\n        <Grid\n          item={true}\n          key={i}\n          xs={12}\n          {...((control.span ?? defaultSpan) as any)}\n        >\n          <MpFormControl\n            register={register}\n            control={control}\n            defaultMessages={defaultMessages}\n            error={get(errors ?? {}, control?.key ?? \"\")}\n            size={size}\n            locale={locale}\n            hookFormControl={hookFormControl}\n            noLabel={true}\n            layout={layout}\n            variant={variant}\n            overridables={overridables}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import { TextField } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { MpControlProps } from \"../../types/Form\";\nimport {\n  controlRegisterOptions,\n  useErrorMessages,\n} from \"../../utils/Control/Control\";\n\nconst inputLabelProps = { shrink: true };\n\nexport default function Multiline({\n  control,\n  size,\n  layout,\n  variant,\n  register,\n  error,\n  defaultMessages,\n}: MpControlProps) {\n  const inputProps = useMemo(\n    () => ({\n      ref: register(controlRegisterOptions(control)),\n    }),\n    [register, control]\n  );\n  const [firstMessage] = useErrorMessages(control, defaultMessages, error);\n\n  return (\n    <TextField\n      error={!!error}\n      multiline={true}\n      rows={4}\n      maxRows={8}\n      helperText={firstMessage}\n      name={control.key}\n      required={control.required}\n      placeholder={control.placeholder}\n      label={layout === \"separated\" ? \"\" : control.label}\n      size={size}\n      fullWidth={true}\n      InputLabelProps={inputLabelProps}\n      inputProps={inputProps}\n      variant={variant}\n    />\n  );\n}\n","import { InputBaseComponentProps } from \"@mui/material\";\nimport React, { forwardRef, useCallback } from \"react\";\n\nexport const NumberInput = forwardRef<HTMLInputElement>(\n  (\n    {\n      onChange,\n      inputRef,\n      decimalPoint = 2,\n      negative = true,\n      ...props\n    }: InputBaseComponentProps & {\n      decimalPoint?: number;\n      negative?: boolean;\n    },\n    ref\n  ) => {\n    const handleChange = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        let val = event.target.value;\n        // Allow only leading -\n        if (negative) {\n          val = val.replace(/-/g, (m, i) => (i > 0 ? \"\" : m));\n        } else {\n          val = val.replace(/-/g, \"\");\n        }\n        // Remove additional . or ,\n        if (decimalPoint > 0) {\n          val = val.replace(/[.,]/g, (m, i: number, s: string) =>\n            s.indexOf(s.match(/[.,]/g)?.[0] ?? \".\") !== i || i === 0 ? \"\" : m\n          );\n        } else {\n          val = val.replace(/[.,]/g, \"\");\n        }\n        // Leave only numbers and . , -\n        val = val.replace(/[^\\d.,-]/g, \"\");\n        if (decimalPoint > 0) {\n          val = val.replace(/[.,]\\d+/g, (m) => m.substr(0, decimalPoint + 1));\n        }\n        // Write to event\n        event.target.value = val;\n        if (typeof onChange === \"function\") {\n          onChange(event);\n        }\n      },\n      [onChange, decimalPoint, negative]\n    );\n    const { onBlur } = props;\n    const handleBlur = useCallback(\n      (event: React.FocusEvent<HTMLInputElement>) => {\n        if (event.target.value != null && event.target.value !== \"\") {\n          event.target.value = (+event.target.value).toFixed(decimalPoint);\n        }\n        if (typeof onBlur === \"function\") {\n          onBlur(event);\n        }\n      },\n      [decimalPoint, onBlur]\n    );\n    return (\n      <input\n        ref={ref ?? inputRef}\n        {...props}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        inputMode=\"decimal\"\n      />\n    );\n  }\n);\n","import { TextField } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { Controller } from \"react-hook-form\";\nimport { NumberInput } from \"../../components/NumberInput/NumberInput\";\nimport { MpControlProps } from \"../../types/Form\";\nimport {\n  booleanDecimalPointToNumber,\n  controlRegisterOptions,\n  useErrorMessages,\n} from \"../../utils/Control/Control\";\n\nconst inputLabelProps = { shrink: true };\n\nexport function NumberView({\n  control,\n  size,\n  layout,\n  variant,\n  error,\n  defaultMessages,\n  value,\n  onChange,\n}: MpControlProps & {\n  value: any;\n  onChange: (...event: any[]) => void;\n}) {\n  const [firstMessage] = useErrorMessages(control, defaultMessages, error);\n  const inputProps = useMemo(\n    () => ({\n      decimalPoint: booleanDecimalPointToNumber(control.decimalPoint),\n      negative: control.negative,\n    }),\n    [control]\n  );\n  const { endAdornment, startAdornment } = control;\n  const InputProps = useMemo(\n    () => ({ inputComponent: NumberInput, endAdornment, startAdornment }),\n    [endAdornment, startAdornment]\n  );\n  return (\n    <TextField\n      error={!!error}\n      helperText={firstMessage}\n      name={control.key}\n      required={control.required}\n      placeholder={control.placeholder}\n      label={layout === \"separated\" ? \"\" : control.label}\n      size={size}\n      fullWidth={true}\n      InputLabelProps={inputLabelProps}\n      value={value ?? \"\"}\n      onChange={onChange}\n      inputProps={inputProps}\n      InputProps={InputProps}\n      variant={variant}\n    />\n  );\n}\n\nexport default function Number(props: MpControlProps) {\n  const { control, hookFormControl } = props;\n  const rules = useMemo(() => controlRegisterOptions(control), [control]);\n  return (\n    <Controller\n      name={control.key ?? \"\"}\n      rules={rules}\n      defaultValue={null}\n      control={hookFormControl}\n      render={({ onChange, value }) => (\n        <NumberView {...props} onChange={onChange} value={value} />\n      )}\n    />\n  );\n}\n","import { InputBaseComponentProps, TextField } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { MpControlProps } from \"../../types/Form\";\nimport {\n  controlRegisterOptions,\n  useErrorMessages,\n} from \"../../utils/Control/Control\";\nimport InputMask from \"react-input-mask\";\n\nconst inputLabelProps = { shrink: true };\n\nexport default function Text({\n  control,\n  size,\n  layout,\n  variant,\n  register,\n  error,\n  defaultMessages,\n}: MpControlProps) {\n  const { endAdornment, startAdornment, format } = control;\n  const inputProps = useMemo(() => {\n    const props: InputBaseComponentProps & {\n      mask?: string;\n      maskChar?: string;\n    } = {\n      ref: register(controlRegisterOptions(control)),\n    };\n    if (format != null) {\n      props.mask = format;\n      props.maskChar = \"\";\n    }\n    return props;\n  }, [register, control, format]);\n  const [firstMessage] = useErrorMessages(control, defaultMessages, error);\n  const InputProps = useMemo(\n    () => ({\n      endAdornment,\n      startAdornment,\n      inputComponent: format ? InputMask : undefined,\n    }),\n    [endAdornment, startAdornment, format]\n  );\n  return (\n    <TextField\n      error={!!error}\n      helperText={firstMessage}\n      name={control.key}\n      required={control.required}\n      placeholder={control.placeholder}\n      label={layout === \"separated\" ? \"\" : control.label}\n      size={size}\n      fullWidth={true}\n      InputLabelProps={inputLabelProps}\n      inputProps={inputProps}\n      InputProps={InputProps}\n      variant={variant}\n    />\n  );\n}\n","import React from \"react\";\nimport { FormControlLabel } from \"@mui/material\";\nimport MuiSwitch from \"@mui/material/Switch\";\nimport { MpControlProps } from \"../../types/Form\";\n\nexport default function Switch({ control, register, layout }: MpControlProps) {\n  return (\n    <FormControlLabel\n      control={\n        <MuiSwitch name={control.key} color=\"primary\" inputRef={register} />\n      }\n      label={layout === \"separated\" ? \"\" : control.label}\n    />\n  );\n}\n","import { ComponentType, useMemo } from \"react\";\nimport {\n  MpControl,\n  MpControlProps,\n  MpControlType,\n  MpFormOverridablesMap,\n} from \"../types/Form\";\nimport Group from \"./Group/Group\";\nimport Multiline from \"./Multiline/Multiline\";\nimport Number from \"./Number/Number\";\nimport Text from \"./Text/Text\";\nimport Switch from \"./Switch/Switch\";\n\nexport const controlMap: Record<\n  MpControlType,\n  ComponentType<MpControlProps>\n> = {\n  [MpControlType.text]: Text,\n  [MpControlType.number]: Number,\n  [MpControlType.multiline]: Multiline,\n  [MpControlType.group]: Group,\n  [MpControlType.switch]: Switch,\n};\n\nexport function useControlType(\n  control: MpControl,\n  overridables?: Partial<MpFormOverridablesMap>\n) {\n  return useMemo(\n    () =>\n      overridables?.controls?.[control.type ?? \"\"] ??\n      controlMap[control.type ?? \"\"] ??\n      controlMap.text,\n    [control, overridables?.controls]\n  );\n}\n","import { Box, Grid, InputLabel } from \"@mui/material\";\nimport React from \"react\";\nimport {\n  Control,\n  FieldError,\n  FieldErrors,\n  RegisterOptions,\n} from \"react-hook-form\";\nimport {\n  DefaultMessages,\n  MpControl,\n  MpFormOverridablesMap,\n} from \"../../types/Form\";\nimport { useControlType } from \"../../controls/Controls\";\n\ninterface Props {\n  control: MpControl;\n  size?: \"small\" | \"medium\";\n  layout?: \"combined\" | \"separated\";\n  noLabel?: boolean;\n  variant?: \"outlined\" | \"standard\" | \"filled\";\n  register(options?: RegisterOptions): any;\n  error?: FieldError;\n  errors?: FieldErrors;\n  locale?: string;\n  hookFormControl: Control;\n  overridables?: Partial<MpFormOverridablesMap>;\n  defaultMessages: DefaultMessages;\n}\n\nexport default function MpFormControl({\n  register,\n  control,\n  size,\n  layout,\n  noLabel,\n  variant,\n  locale,\n  error,\n  errors,\n  hookFormControl,\n  defaultMessages,\n  overridables,\n}: Props) {\n  const Component = useControlType(control, overridables);\n\n  const renderedComponent = (\n    <Component\n      control={control}\n      defaultMessages={defaultMessages}\n      register={register}\n      locale={locale}\n      size={size}\n      overridables={overridables}\n      hookFormControl={hookFormControl}\n      layout={layout}\n      variant={variant}\n      errors={errors}\n      error={error}\n    />\n  );\n\n  return layout === \"separated\" && !noLabel ? (\n    <Grid container={true} spacing={2}>\n      <Grid item={true} xs={12} sm={4}>\n        <Box paddingTop={size === \"small\" ? 1 : 2}>\n          <InputLabel error={!!error} required={control.required}>\n            {control.label}\n          </InputLabel>\n        </Box>\n      </Grid>\n      <Grid item={true} xs={12} sm={8}>\n        {renderedComponent}\n      </Grid>\n    </Grid>\n  ) : (\n    renderedComponent\n  );\n}\n","import { Grid } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { MpControl, MpFormProps } from \"../../types/Form\";\nimport { defaultMessages } from \"../../utils/Control/Control\";\nimport MpFormControl from \"../MpFormControl/MpFormControl\";\nimport { get } from \"react-hook-form\";\n\nconst defaultSpan = { xs: 12 };\n\nexport default function MpForm({\n  controls,\n  size,\n  layout,\n  variant,\n  locale,\n  useFormMethods,\n  overridables,\n  defaultMessages: partialDefaultMessages,\n}: MpFormProps) {\n  const { register, errors, control: hookFormControl } = useFormMethods;\n  const messages = useMemo(\n    () => ({\n      ...defaultMessages,\n      ...(partialDefaultMessages ?? {}),\n    }),\n    [partialDefaultMessages]\n  );\n\n  return (\n    <Grid container={true} spacing={2}>\n      {controls.map((control: MpControl, i: number) => (\n        <Grid\n          item={true}\n          key={i}\n          xs={12}\n          {...((control.span ?? defaultSpan) as any)}\n        >\n          <MpFormControl\n            register={register}\n            control={control}\n            locale={locale}\n            hookFormControl={hookFormControl}\n            defaultMessages={messages}\n            error={get(errors ?? {}, control?.key ?? \"\")}\n            errors={errors}\n            size={size}\n            layout={layout}\n            variant={variant}\n            overridables={overridables}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n"],"names":["control","_control$validations","_control$validations3","pattern","validations","RegExp","_control$validations2","e","console","warn","required","min","max","minLength","_ref","maxLength","defaultMessages","label","_control$label","key","_control$label2","_control$label3","_control$label4","_control$label5","_control$label6","error","useMemo","_error$types","type","Object","keys","types","filter","_error$types2","map","_control$messages","_control$messages2","message","messages","decimalPoint","MpControlType","defaultSpan","xs","Group","size","layout","variant","register","locale","errors","hookFormControl","overridables","React","Grid","container","spacing","children","_control$children","i","assign","item","span","_control$span","createElement","MpFormControl","get","_control$key","noLabel","inputLabelProps","shrink","Multiline","inputProps","ref","controlRegisterOptions","useErrorMessages","TextField","multiline","rows","maxRows","helperText","name","placeholder","fullWidth","InputLabelProps","_excluded","forwardRef","onChange","inputRef","_ref$decimalPoint","_ref$negative","negative","props","_objectWithoutPropertiesLoose","handleChange","useCallback","event","val","target","value","replace","m","s","indexOf","_s$match$","_s$match","match","substr","onBlur","handleBlur","toFixed","inputMode","firstMessage","booleanDecimalPointToNumber","endAdornment","startAdornment","inputComponent","NumberInput","InputProps","Number","rules","Controller","defaultValue","render","NumberView","_ref2","Text","format","mask","maskChar","InputMask","undefined","Switch","FormControlLabel","MuiSwitch","color","controlMap","text","number","group","_controlMap","Component","_overridables$control","_overridables$control2","_control$type","_control$type2","controls","useControlType","renderedComponent","sm","Box","paddingTop","InputLabel","MpForm","useFormMethods","partialDefaultMessages","_extends"],"mappings":"qgBAIM,WAAiCA,GAAkB,IAAAC,EAAAC,EACvDC,EACA,GAAoC,OAAhC,OAAAH,EAAAA,EAAQI,kBAAR,EAAAH,EAAqBE,SACvB,IACEA,IAAAA,EAAAA,EAAU,IAAIE,OAAJ,OAAWL,EAAAA,EAAQI,kBAAnB,EAAWE,EAAqBH,SAC1C,MAAOI,GAEPC,QAAQC,KACN,yCACAT,EAAQI,YAAYD,SAI1B,MAAkE,SAAvBH,EAAQI,aAAeF,EAAA,GAClE,MAAO,CACLQ,SAAUV,EAAQU,SAClBC,MAHMA,IAINC,IAJWA,EAAAA,IAKXC,UALFC,EAAkBD,UAMhBE,UAN2BA,EAAAA,UAO3BZ,QAASA,GAIAa,MAAAA,EAAmC,CAC9CN,SAAU,SAACV,GACNA,IAAAA,EAAAA,OADK,OACLA,EAAAA,EAAQiB,OADHC,EACYlB,EAAQmB,qBAC9BR,IAAK,SAACX,GAA0BA,IAAAA,EAAAA,OAA3B,OAA2BA,EAAAA,EAAQiB,OAAnCG,EAA4CpB,EAAQmB,KAHX,iBAI9CP,IAAK,SAACZ,GAA0BA,IAAAA,EAAAA,OAA3B,OAA2BA,EAAAA,EAAQiB,OAAnCI,EAA4CrB,EAAQmB,KAJX,iBAK9CN,UAAW,SAACb,GACPA,IAAAA,EAAAA,OADM,OACNA,EAAAA,EAAQiB,OADFK,EACWtB,EAAQmB,sBAC9BJ,UAAW,SAACf,GACPA,IAAAA,EAAAA,OADM,OACNA,EAAAA,EAAQiB,OADFM,EACWvB,EAAQmB,qBAC9BhB,QAAS,SAACH,GACLA,IAAAA,EAAAA,OADI,OACJA,EAAAA,EAAQiB,OADJO,EACaxB,EAAQmB,KAVgB,6BAc9CnB,EACAgB,EACAS,GAEA,OAAOC,EAAQ,WAAK,IAAAC,EAOlB,MANkB,OAChBF,SAAAA,EAAOG,MACJC,OAAAA,OAAOC,YAAPH,EAAA,MAAYF,OAAZ,EAAYA,EAAOM,SAAS,IAAIC,OACjC,SAACJ,GAAD,IAAAK,EAAA,OAAkC,OAAnB,MAALR,GAAeG,SAAfH,EAAOM,cAAQH,EAAAA,OAE3BI,OAAO,SAACb,UAAe,MAAJA,IACJe,IAAI,SAACf,GACpB,IAAAgB,EAAAC,EAAA,OAAC,MAACX,GAAAA,EAAOY,QACLZ,EAAMY,iBADV,MAEIrC,UAFJoC,EAEIpC,EAASsC,eAFb,EAEIF,EAAoBjB,MAAAA,EAAAA,EAAO,OAC3BH,EAAgBG,GAAO,WAAWnB,MAEvC,CAACA,EAASyB,EAAOT,IAGhB,WACJuB,GAEA,OAAQA,GACN,KAAA,EACE,OACF,KAAA,EACE,OAAA,EACF,QACE,OAAOA,IC9Db,SAAYC,GACVA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,UAAA,YACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SALF,CAAYA,IAAAA,EAMX,KCTD,IAAMC,EAAc,CAAEC,GAAI,aAEZC,EAAA7B,GACZd,IAAAA,EACA4C,EASe9B,EATf8B,KACAC,IAAAA,OACAC,EAOehC,EAPfgC,QACAC,EAAAA,EAAAA,SACAC,EAKelC,EALfkC,OACAC,EAAAA,EAAAA,OACAC,IAAAA,gBACAlC,EAAAA,EAAAA,gBACAmC,EACerC,EADfqC,aAEA,OACEC,gBAACC,EAAI,CAACC,WAAW,EAAMC,QAAS,GAAhC,OACGvD,EAbLA,EAAAA,QAaawD,eADX,EACGC,EAAkBvB,IAAI,SAAClC,EAAoB0D,kCACzCL,EAAIxB,OAAA8B,OAAA,CACHC,MAAM,EACNzC,IAAKuC,EACLhB,GAAI,IAHD,OAIG1C,EAAAA,EAAQ6D,MAJXC,EAImBrB,GAEtBW,EAAAW,cAACC,EAAa,CACZjB,SAAUA,EACV/C,QAASA,EACTgB,gBAAiBA,EACjBS,MAAOwC,EAAIhB,MAAAA,EAAAA,EAAU,GAAoB,OAA/BiB,EAAA,MAAelE,OAAf,EAAeA,EAASmB,KAAO+C,EAAA,IACzCtB,KAAMA,EACNI,OAAQA,EACRE,gBAAiBA,EACjBiB,SAAS,EACTtB,OAAQA,EACRC,QAASA,EACTK,aAAcA,QChC1B,IAAMiB,EAAkB,CAAEC,QAAQ,YAEpBC,EAAAxD,OAQGd,EAAAc,EAPfd,QACA4C,IAAAA,KACAC,EAAAA,EAAAA,OACAC,IAAAA,QACAC,EAAAA,EAAAA,SACAtB,EAEeX,EAFfW,MACAT,IAAAA,gBAEgBuD,EAAG7C,EACjB,WAAA,MAAO,CACL8C,IAAKzB,EAAS0B,EAAuBzE,MAEvC,CAAC+C,EAAU/C,MAEU0E,EAAiB1E,EAASgB,EAAiBS,GAElE,OACE2B,EAACW,cAAAY,EACC,CAAAlD,QAASA,EACTmD,WAAW,EACXC,KAAM,EACNC,QAAS,EACTC,gBACAC,KAAMhF,EAAQmB,IACdT,SAAUV,EAAQU,SAClBuE,YAAajF,EAAQiF,YACrBhE,MAAkB,cAAX4B,EAAyB,GAAK7C,EAAQiB,MAC7C2B,KAAMA,EACNsC,WAAW,EACXC,gBAAiBf,EACjBG,WAAYA,EACZzB,QAASA,ICzCf,IAAAsC,EAAA,CAAA,WAAA,WAAA,eAAA,cAE2BC,EACzB,SAWEb,EAAAA,GATEc,IAAAA,EAAAA,EAAAA,SACAC,EASAzE,EATAyE,SACAhD,EAAAA,EAAAA,aAAAA,OAQA,IAAAiD,EARe,EAQfA,EAAAC,EAAA3E,EAPA4E,SAAAA,cAOAD,EANGE,oIAOLC,CAAA9E,EAAAsE,GAAkBS,EAAGC,EACnB,SAACC,GACC,IAAOC,EAAGD,EAAME,OAAOC,MAgBvBF,GAPEA,GANAA,EAAMA,EAAIG,QAAQ,KADhBT,EACsB,SAACU,EAAG1C,GAAOA,OAAAA,EAAI,EAAI,GAAK0C,GAExB,KAIdD,QAAQ,QADhB5D,EAAe,EACU,SAAC6D,EAAG1C,EAAW2C,GACxCA,IAAAA,EAAAA,EAAAA,OAAAA,EAAEC,QAAF,OAAAC,EAAU,OAAVC,EAAUH,EAAEI,MAAM,eAAR,EAAAD,EAAmB,IAA7BD,EAAmC,OAAS7C,GAAW,IAANA,EAAU,GAAK0C,GAGvC,KAGnBD,QAAQ,YAAa,IAC3B5D,EAAe,IACjByD,EAAMA,EAAIG,QAAQ,WAAY,SAACC,UAAOA,EAACM,OAAO,EAAGnE,EAAe,MAGlEwD,EAAME,OAAOC,MAAQF,EACG,mBAAbV,GACTA,EAASS,IAGb,CAACT,EAAU/C,EAAcmD,IAEnBiB,EAAWhB,EAAXgB,OACQC,EAAGd,EACjB,SAACC,GAC2B,MAAtBA,EAAME,OAAOC,OAAwC,KAAvBH,EAAME,OAAOC,QAC7CH,EAAME,OAAOC,QAAUH,EAAME,OAAOC,OAAOW,QAAQtE,IAE/B,mBAAlBoE,GACFA,EAAOZ,IAGX,CAACxD,EAAcoE,IAEjB,OACEvD,uCACEoB,IAAG,MAAEA,EAAAA,EAAOe,GACRI,EACJ,CAAAgB,OAAQC,EACRtB,SAAUO,EACViB,UAAU,eCtDZ1C,EAAkB,CAAEC,QAAQ,qBAcjCrE,EAAAc,EAXCd,QACA4C,IAAAA,KACAC,EASD/B,EATC+B,OACAC,IAAAA,QACArB,EAAAA,EAAAA,MAEAyE,EAAAA,EAAAA,MACAZ,EAIDxE,EAJCwE,SAKOyB,EAAgBrC,EAAiB1E,IAPxCgB,gBAOkES,MAC5D8C,EAAa7C,EACjB,iBAAO,CACLa,aAAcyE,EAA4BhH,EAAQuC,cAClDmD,SAAU1F,EAAQ0F,WAEpB,CAAC1F,IAEHiH,EAAyCjH,EAAjCiH,aAAcC,EAAmBlH,EAAnBkH,iBACHxF,EACjB,WAAO,MAAA,CAAEyF,eAAgBC,EAAaH,aAAAA,EAAcC,eAAAA,IACpD,CAACD,EAAcC,IAEjB,SACGnD,cAAAY,EACC,CAAAlD,QAASA,EACTsD,WAAYgC,EACZ/B,KAAMhF,EAAQmB,IACdT,SAAUV,EAAQU,SAClBuE,YAAajF,EAAQiF,YACrBhE,MAAkB,cAAX4B,EAAyB,GAAK7C,EAAQiB,MAC7C2B,KAAMA,EACNsC,WAAW,EACXC,gBAAiBf,EACjB8B,MAAK,MAAEA,EAAAA,EAAS,GAChBZ,SAAUA,EACVf,WAAYA,EACZ8C,WAAYA,EACZvE,QAASA,IAKSwE,SAAAA,EAAO3B,GAC7B,IAAAzB,IAAqCyB,EAA7B3F,QAASkD,EAAoByC,EAApBzC,gBACXqE,EAAQ7F,EAAQ,kBAA4B+C,EAACzE,IAAU,CAACA,IAC9D,OACEoD,EAACW,cAAAyD,EACC,CAAAxC,KAAqB,OAAjBd,EAAElE,EAAQmB,KAAO+C,EAAA,GACrBqD,MAAOA,EACPE,aAAc,KACdzH,QAASkD,EACTwE,OAAQ,SAAGpC,GACTlC,OAAAA,EAACW,cAAA4D,EAAe9F,OAAA8B,OAAA,GAAAgC,GAAOL,WADdA,SACkCY,MADrC0B,EAAa1B,YC3D3B,MAAqB9B,EAAG,CAAEC,QAAQ,GAEpB,SAAAwD,EAAA/G,GACZd,IAAAA,EAAAA,EAAAA,QACA4C,EAAAA,EAAAA,KACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SACAtB,EAAAA,EAAAA,MACAT,EAAAA,EAAAA,gBAEAiG,EAAiDjH,EAAzCiH,aAAcC,EAA2BlH,EAA3BkH,eAAgBY,EAAW9H,EAAX8H,OAChCvD,EAAa7C,EAAQ,WACzB,IAAWiE,EAGP,CACFnB,IAAKzB,EAAS0B,EAAuBzE,KAMvC,OAJc,MAAV8H,IACFnC,EAAMoC,KAAOD,EACbnC,EAAMqC,SAAW,IAGpBrC,GAAE,CAAC5C,EAAU/C,EAAS8H,IAChBf,EAAgBrC,EAAiB1E,EAASgB,EAAiBS,GAAlE,GACM4F,EAAa3F,EACjB,WAAA,MAAO,CACLuF,aAAAA,EACAC,eAAAA,EACAC,eAAgBW,EAASG,OAAYC,IAEvC,CAACjB,EAAcC,EAAgBY,IAEjC,OACE1E,EAAAW,cAACY,EAAS,CACRlD,QAASA,EACTsD,WAAYgC,EACZ/B,KAAMhF,EAAQmB,IACdT,SAAUV,EAAQU,SAClBuE,YAAajF,EAAQiF,YACrBhE,MAAkB,cAAX4B,EAAyB,GAAK7C,EAAQiB,MAC7C2B,KAAMA,EACNsC,WAAW,EACXC,gBAAiBf,EACjBG,WAAYA,EACZ8C,WAAYA,EACZvE,QAASA,aCnDDqF,EAAArH,GAAmBd,IAAAA,IAAAA,QAAmB6C,EAAAA,EAAAA,OAClD,OACEO,EAACW,cAAAqE,GACCpI,QACEoD,gBAACiF,EAAS,CAACrD,KAAMhF,EAAQmB,IAAKmH,MAAM,UAAU/C,SAJsBzE,EAAlCiC,WAMpC9B,MAAkB,cAAX4B,EAAyB,GAAK7C,EAAQiB,QCEtCsH,IAAAA,IAIV/F,EAAAA,IAAAA,EAAcgG,MAAOX,EACrBrF,EAAAA,EAAciG,QAASnB,EACvB9E,EAAAA,EAAcoC,WAAYN,EAC1B9B,EAAAA,EAAckG,OAAQ/F,EAPFgG,EAQpBnG,EAAa,QAAU2F,EARnBQ,GCiBiB3E,SAAAA,EAahBlD,GAAA,IAAAiC,EAAAjC,EAZNiC,SACA/C,EAWMc,EAXNd,QACA4C,EAUM9B,EAVN8B,KACAC,EASM/B,EATN+B,OACAsB,EAQMrD,EARNqD,QACArB,EAOMhC,EAPNgC,QACAE,EAMMlC,EANNkC,OACAvB,EAKMX,EALNW,MACAwB,EAIMnC,EAJNmC,OACAC,EAGMpC,EAHNoC,gBACAlC,EAEMF,EAFNE,gBACAmC,EACMrC,EADNqC,aAEMyF,EDpBQ,SACd5I,EACAmD,GAEA,OAAOzB,EACL,WAAA,IAAAZ,EAAA+H,EAAAC,EAAAC,EAAAC,EAAA,OAAA,OAAAlI,EAEEyH,OAFFM,EAAA,MACE1F,GADF,OAAA2F,EACE3F,EAAc8F,eADhB,EACEH,EAAA,OAAyB9I,EAAAA,EAAQ4B,MAAjCmH,EAAyC,KACzCR,EAAAA,EAA2B,OAAhBvI,EAAAA,EAAQ4B,MAAQoH,EAAA,KAF7BlI,EAGEyH,EAAWC,MACb,CAACxI,EAAD,MAAUmD,OAAV,EAAUA,EAAc8F,WCWRC,CAAelJ,EAASmD,GAEpCgG,EACJ/F,EAAAW,cAAC6E,EACC,CAAA5I,QAASA,EACTgB,gBAAiBA,EACjB+B,SAAUA,EACVC,OAAQA,EACRJ,KAAMA,EACNO,aAAcA,EACdD,gBAAiBA,EACjBL,OAAQA,EACRC,QAASA,EACTG,OAAQA,EACRxB,MAAOA,IAIX,MAAkB,cAALoB,GAAqBsB,EAchCgF,EAbA/F,EAACW,cAAAV,GAAKC,WAAW,EAAMC,QAAS,GAC9BH,EAAAW,cAACV,EAAI,CAACO,MAAM,EAAMlB,GAAI,GAAI0G,GAAI,GAC5BhG,EAAAW,cAACsF,EAAG,CAACC,WAAqB,UAAT1G,EAAmB,EAAI,GACtCQ,EAAAW,cAACwF,EAAW,CAAA9H,QAASA,EAAOf,SAAUV,EAAQU,UAC3CV,EAAQiB,SAIfmC,EAACW,cAAAV,EAAK,CAAAO,MAAM,EAAMlB,GAAI,GAAI0G,GAAI,GAC3BD,ICjET,IAAM1G,EAAc,CAAEC,GAAI,IAEF,SAAA8G,EAAA1I,GACtBmI,IAAAA,EAAAA,EAAAA,SACArG,EAOY9B,EAPZ8B,KACAC,EAMY/B,EANZ+B,OACAC,EAKYhC,EALZgC,QACAE,EAIYlC,EAJZkC,OACAyG,EAAAA,EAAAA,eACAtG,EAAAA,EAAAA,aACiBuG,EAAjB1I,EAAAA,kBAEuDyI,EAA/C1G,SAAUE,EAAqCwG,EAArCxG,OAAiBC,EAAoBuG,EAA7BzJ,QACpBsC,EAAWZ,EACf,WAAA,OAAAiI,EAAA,GACK3I,EADL,MAEM0I,EAAAA,EAA0B,KAEhC,CAACA,IAGH,OACEtG,gBAACC,EAAI,CAACC,WAAW,EAAMC,QAAS,GAC7B0F,EAAS/G,IAAI,SAAClC,EAAoB0D,GAArB,IAAAI,EAAAI,EAAA,OACZd,EAAAW,cAACV,EACCxB,OAAA8B,OAAA,CAAAC,MAAM,EACNzC,IAAKuC,EACLhB,GAAI,WACE1C,EAAAA,EAAQ6D,QAAQpB,GAEtBW,EAAAW,cAACC,EAAa,CACZjB,SAAUA,EACV/C,QAASA,EACTgD,OAAQA,EACRE,gBAAiBA,EACjBlC,gBAAiBsB,EACjBb,MAAOwC,EAAG,MAAChB,EAAAA,EAAU,GAAoB,OAA/BiB,EAAA,MAAelE,OAAf,EAAeA,EAASmB,KAAO+C,EAAA,IACzCjB,OAAQA,EACRL,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACTK,aAAcA"}